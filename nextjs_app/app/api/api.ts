import OpenAI from "openai";
import axios from "axios";

const apiKey = process.env["OPEN_AI_API_KEY"];

const openai = new OpenAI({
  baseURL: "http://127.0.0.1:5000/v1",
  apiKey: "",
  dangerouslyAllowBrowser: true,
});

const SD_API_URL = "http://127.0.0.1:7862";

export async function writeStory(input: string): Promise<Story> {
  const message = `### Instruction:
  You are a very successful Comics story writer. You impress readers with your creative and exciting comics story
  
  ### Input:
  Write a short story for a comic book and choose a main character and a style and two colors that should be predominant in the illustrations. 
  The story is about ${input}.
  The output should be  JSON object containing title, story, style and colors.                                  
  Example output:
                 {
                  'title': 'The Happy wizard',
                  'story': 'Once upon a time there was a wizard named Pepe {{...}}',
                  'style': 'Classic Manga',
                  'colors': ['red','blue']
                 } 
  
  Important:
      - Output ONLY the JSON file without anything else
            - The final JSON object must include all fields. Do not leave any out.
            - Do NOT generate NSFW content
            - Make sure the story is short, coherent and with no spelling errors.`;

  const response = await openai.chat.completions.create({ model: "gpt-3.5-turbo", messages: [{ role: "system", content: message }] });
  if (response.choices[0].message.content === null) {
    throw new Error("Unexpected null content in the response.");
  }
  const story: Story = JSON.parse(response.choices[0].message.content as string);

  return story;
}

export async function writeScene(story: string, sceneNumber: number): Promise<Array<Scene>> {
  const message = `### Instruction:
  You are a great screen writer with a very creative imagination. You captivate the readers with images generated by your description.
  
  ### Input:
  Given a story split it into a number of scenes. Each scene should contain a very detailed description of a image that will be generated and a very short dialog or text that describes the scene.
  Split the story in ${sceneNumber} scenes. Each scene should contain a detailed description of a image for the scene and a short dialog or text that describes the scene.
  The output should be a Array of objects with image and text as fields
  Example Output:
                [
                  {'image': 'A beautiful sunset on a green field with a black horse {{...}}', 'text': 'The day was over and {{...}}'},
                  ...
                ]
  
  Important:
      - Output ONLY the Array without anything else
      - Make sure the Array is properly formatted and has the open and close []
      - Do NOT generate NSFW content
  Story: ${story}`;

  const response = await openai.chat.completions.create({ model: "gpt-3.5-turbo", messages: [{ role: "user", content: message }] });
  // max_tokens: 15000 });
  if (response.choices[0].message.content === null) {
    throw new Error("Unexpected null content in the response.");
  }

  const stringResponse = response.choices[0].message.content;

  // Regular expressions to match the content after 'image': and 'text':
  const imageRegex = /'image'\s*:\s*'([^']*)'/g;
  const textRegex = /'text'\s*:\s*'([^']*)'/g;

  // Array to store the extracted objects
  const scenes = [];

  let imageMatch;
  let textMatch;

  // Loop through each match of image and text
  while ((imageMatch = imageRegex.exec(stringResponse)) !== null && (textMatch = textRegex.exec(stringResponse)) !== null) {
    const obj: Scene = {
      image: imageMatch[1],
      text: textMatch[1],
    };

    scenes.push(obj);
  }
  const scenesFinal = scenes.slice(0, sceneNumber);

  // const unload = await axios.post(
  //   "http://127.0.0.1:5000/v1/internal/model/unload",
  //   {},
  //   {
  //     headers: {
  //       Accept: "application/json",
  //       "Content-Type": "application/json",
  //     },
  //   }
  // );

  return scenes;
}

export async function generateImage(input: string, title: string, style: string, colors: Array<string>, negativePrompt: string) {
  const prompt = `${input} style, ${colors[0]} , ${colors[1]}`;
  const payload = {
    prompt: input,
    negative_prompt: negativePrompt,
    seed: -1,
    steps: 8,
    cfg_scale: 2,
    width: 512,
    height: 512,
    sampler_index: "DPM++ SDE",
  };

  const response = await axios.post(`${SD_API_URL}/sdapi/v1/txt2img`, payload);

  const image = response.data.images[0];

  // console.log(image);

  return image;
}
